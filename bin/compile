#!/bin/bash -e

echo "Starting the buildpack script"

# Invoked as: bin/compile BUILD_DIR CACHE_DIR ENV_DIR

echo "a.."

set -e

steptxt="----->"

start() {
    echo -n "$steptxt $@... "
}

finished() {
    echo "done"
}

###########################################################
# Crystal core buildpack:
###########################################################

echo "b.."

CURL="curl -s -L --retry 15 --retry-delay 2" # retry for up to 30 seconds

function json_value() {
    KEY=$1
    num=$2
    awk -F"[,:}]" '{for(i=1;i<=NF;i++){if($i~/\042'$KEY'\042/){print $(i+1)}}}' | tr -d ' "' | sed -n ${num}p
}

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

export LUCKY_ENV=production
export SKIP_LUCKY_TASK_PRECOMPILATION=1

echo "c.."

if [ -f $BUILD_DIR/.crystal-version ]; then
    CRYSTAL_VERSION=`cat $BUILD_DIR/.crystal-version | tr -d '\012'`
    CRYSTAL_VERSION_REASON='due to .crystal-version file'
else
    CRYSTAL_VERSION="1.2.2"
    CRYSTAL_VERSION_REASON='buildpack is now ignoring crysta-version, hard coding CV'
fi

echo "d.."

echo "starting TAGNAME"
TAG_NAME=`${CURL} https://api.github.com/repos/crystal-lang/crystal/releases | json_value tag_name | grep ${CRYSTAL_VERSION}`
echo "TAG_NAME: $TAG_NAME"

echo "starting CRYSTAL_URL"
CRYSTAL_URL=`${CURL} https://api.github.com/repos/crystal-lang/crystal/releases/tags/${TAG_NAME} | grep 'https://github.com/crystal-lang/crystal/releases/download/.*-linux-x86_64.tar.gz' | sed 's/.*: "\(.*\)"/\1/'`
echo "CRYSTAL_URL: $CRYSTAL_URL"

echo "starting CRYSTAL_DIR"
CRYSTAL_DIR=$BUILD_DIR/.heroku/crystal
echo "CRYSTAL_DIR: $CRYSTAL_DIR"

unset GIT_DIR
echo "GIT_DIR unset"

echo "e.."

# Install Crystal
mkdir -p $ENV_DIR
mkdir -p $CACHE_DIR
mkdir -p $CRYSTAL_DIR
mkdir -p $BUILD_DIR/.profile.d
mkdir -p $BUILD_DIR/.heroku/crystal
mkdir -p $BUILD_DIR/.heroku/lucky
start "Installing Crystal ($CRYSTAL_VERSION $CRYSTAL_VERSION_REASON) from $CRYSTAL_URL to $CRYSTAL_DIR"
${CURL} $CRYSTAL_URL | tar xz -C $CRYSTAL_DIR --strip-component=1
finished
PATH="${PATH}:${CRYSTAL_DIR}/bin:${CRYSTAL_DIR}/embedded/bin/"
echo "export PATH=\$HOME/.heroku/crystal/bin:\$PATH" >> "$BUILD_DIR/.profile.d/crystal_environment.sh"

echo "f.."

###########################################################
# End of Crystal core buildpack
###########################################################

echo "7.."

cd "$BUILD_DIR"

if [ -d $BUILD_DIR/bin ]; then
    start "Using the already compiled shards"
    echo "Using the already compiled shards"
    start "1.."
    echo "1.."  
else
    start "Installing shards and compiling project"
    echo "Installing shards and compiling project"
    shards build --production --release --ignore-crystal-version
fi

echo "8.."

echo "Installing Lucky tasks"
start "Setting up Lucky tasks"
crystal build tasks.cr -o "$BUILD_DIR/.heroku/lucky/lucky" --release --progress --no-debug

echo "9.."

echo "export PATH=\$PATH:\$HOME/.heroku/lucky" >> "$BUILD_DIR/.profile.d/lucky_environment.sh"

finished
